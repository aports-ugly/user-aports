From a5d6260a3d790f6697b5688be9ad2a87bf02c5b2 Mon Sep 17 00:00:00 2001
From: Jakub Jirutka <jakub@jirutka.cz>
Date: Wed, 13 Dec 2017 19:44:29 +0100
Subject: [PATCH] Complete support for AsciiDoc include::[] directive

---
 Gemfile                |  1 +
 Gemfile.lock           |  3 +++
 lib/gitlab/asciidoc.rb | 50 ++++++++++++++++++++++++++++----------------------
 3 files changed, 32 insertions(+), 22 deletions(-)

diff --git a/Gemfile b/Gemfile
index dc8f503..a800706 100644
--- a/Gemfile
+++ b/Gemfile
@@ -122,6 +122,7 @@ gem 'wikicloth', '0.8.1'
 gem 'asciidoctor', '~> 1.5.2'
 gem 'asciidoctor-html5s', '= 0.1.0.beta.4'
 gem 'asciidoctor-plantuml', '0.0.7'
+gem 'asciidoctor-include-ext', '~> 0.1.1', require: false
 gem 'asciidoctor-rouge', '~> 0.2.0', require: false
 gem 'rouge', '~> 2.0'
 gem 'truncato', '~> 0.7.9'
diff --git a/Gemfile.lock b/Gemfile.lock
index eda1eb7..13b7e91 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -62,6 +62,8 @@ GEM
     asciidoctor-html5s (0.1.0.beta.4)
       asciidoctor (~> 1.5.5)
       thread_safe (~> 0.3.4)
+    asciidoctor-include-ext (0.1.1)
+      asciidoctor (~> 1.5.6)
     asciidoctor-plantuml (0.0.7)
       asciidoctor (~> 1.5)
     asciidoctor-rouge (0.2.0)
@@ -931,6 +933,7 @@ DEPENDENCIES
   asana (~> 0.6.0)
   asciidoctor (~> 1.5.2)
   asciidoctor-html5s (= 0.1.0.beta.4)
+  asciidoctor-include-ext (~> 0.1.1)
   asciidoctor-plantuml (= 0.0.7)
   asciidoctor-rouge (~> 0.2.0)
   attr_encrypted (~> 3.0.0)
diff --git a/lib/gitlab/asciidoc.rb b/lib/gitlab/asciidoc.rb
index 58947f9..f1cc604 100644
--- a/lib/gitlab/asciidoc.rb
+++ b/lib/gitlab/asciidoc.rb
@@ -2,6 +2,7 @@
 require 'asciidoctor/extensions'
 require 'asciidoctor-html5s'
 require "asciidoctor-plantuml"
+require 'asciidoctor/include_ext/include_processor'
 require 'asciidoctor/rouge/treeprocessor'
 
 module Gitlab
@@ -28,7 +29,7 @@
         include_processor GitlabIncludeProcessor.new(context)
       end
 
-      asciidoc_opts = { safe: :secure,
+      asciidoc_opts = { safe: :server,
                         backend: :gitlab_html5,
                         attributes: DEFAULT_ADOC_ATTRS,
                         extensions: extensions }
@@ -77,9 +78,10 @@
 
     # Asciidoctor extension for processing includes (macro include::[]) within
     # documents inside the same repository.
-    class GitlabIncludeProcessor < Asciidoctor::Extensions::IncludeProcessor
-      def initialize(context, config = {})
-        super(config)
+    class GitlabIncludeProcessor < Asciidoctor::IncludeExt::IncludeProcessor
+      # Overrides super class method.
+      def initialize(context)
+        super(logger: Gitlab::AppLogger)
 
         @context = context
         @repository = context[:project].try(:repository)
@@ -91,34 +93,38 @@
         }
       end
 
-      def process(doc, reader, target, attributes)
-        return reader unless @repository.try(:exists?)
+      protected
 
-        # Resolve relative target path against the requested path (path of the
-        # file user wants to see), or against path of the currently processed
-        # include if processing nested include (i.e. A includes B,
-        # B includes C, ...).
+      # Overrides super class method.
+      def resolve_target_path(target, reader)
+        return unless @repository.try(:exists?)
+
         base_path = reader.include_stack.empty? ? requested_path : reader.file
         path = resolve_relative_path(target, base_path)
 
-        blob = @repository.blob_at(ref, path)
-        error = if blob.nil?
-                  'Unresolved path'
-                elsif !blob.readable_text?
-                  'File not readable'
-                elsif reader.exceeded_max_depth?
-                  'Maximum depth exceeded'
-                end
-        if error
-          reader.replace_line("*[ERROR: include::#{target}[] - #{error}]*")
+        path if Gitlab::Git::Blob.find(@repository, ref, path)
+      end
+
+      # Overrides super class method.
+      def read_lines(filename, selector)
+        blob = @repository.blob_at(ref, filename)
+
+        raise 'Blob not found' unless blob
+        raise 'File is not readable' unless blob.readable_text?
+
+        if selector
+          blob.data.each_line.select.with_index(1, &selector)
         else
-          reader.push_include(blob.data, path, target, 1, attributes)
+          blob.data
         end
+      end
 
-        reader
+      # Overrides super class method.
+      def unresolved_include!(target, reader)
+        reader.unshift_line("*[ERROR: include::#{target}[] - unresolved directive]*")
       end
 
-      protected
+      private
 
       # Resolves the given relative path of file in repository into canonical
       # path based on the specified base_path.
