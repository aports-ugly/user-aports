# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Jakub Jirutka <jakub@jirutka.cz>
pkgname=gitlab-ce
_pkgname=${pkgname%-ce}
pkgver=8.11.11
pkgrel=2
pkgdesc="A version control for your server"
url="https://github.com/gitlabhq/gitlabhq"
arch="all"
license="MIT"
_rubyslot=""
# ruby-irb is needed only for Rails console (gitlab-rails console)
depends="$pkgname-assets ca-certificates git>=2.7.3 gitlab-shell>=3.4.0
	gitlab-workhorse>=0.7.10 http-parser libgit2>=0.24 nodejs procps
	py-docutils redis>=2.8 tzdata
	ruby$_rubyslot
	ruby$_rubyslot-io-console
	ruby$_rubyslot-bigdecimal
	ruby$_rubyslot-json
	ruby$_rubyslot-rake
	ruby$_rubyslot-irb
	ruby$_rubyslot-bundler
	"
makedepends="icu-dev libgcrypt-dev libgit2-dev>=0.24 libxml2-dev libxslt-dev
	linux-headers libressl-dev postgresql-dev>=9.1 nodejs ruby$_rubyslot-dev
	"
pkgusers="git"
pkggroups="git"
install="$pkgname.pre-install $pkgname.post-install $pkgname.post-upgrade"
subpackages="$pkgname-assets::noarch"
source="$pkgname-$pkgver.tar.gz::https://github.com/gitlabhq/gitlabhq/archive/v$pkgver.tar.gz
	$_pkgname.initd
	$_pkgname.mailroom.initd
	$_pkgname.sidekiq.initd
	$_pkgname.confd
	$_pkgname.logrotate
	bin-wrapper
	0001-Gemfile.patch
	0002-default-configs.patch
	0003-dont-dump-schema.patch
	0004-fix-setup-task.patch
	0005-fix-check-task.patch
	0006-replace-sys-filesystem.patch
	0007-add-mathjax-support.patch
	0008-fix-asciidoc-headers.patch
	0009-gitlab-revision.patch
	"
builddir="$srcdir/gitlabhq-$pkgver"

_prefix="/usr/lib/bundles/$_pkgname"

prepare() {
	default_prepare || return 1  # apply patches

	cd "$builddir"

	# Change shebang to run with correct Ruby version.
	#local file; for file in bin/bundle bin/rails bin/rake; do
	#	sed -i "s|/usr/bin/env ruby|/usr/bin/env ruby$_rubyslot|" $file || return 1
	#done
	#sed -i "s|/usr/bin/env rake|/usr/bin/env rake$_rubyslot|" Rakefile || return 1

	# The default log level is very chatty.
	sed -i 's/^\(\s*config.log_level\s*=\).*$/\1 :warn/' \
		config/environments/production.rb || return 1

	# This is not needed, the secret_token is generated by the
	# gitlab-shell package. It also makes problems in the build phase.
	rm config/initializers/gitlab_shell_secret_token.rb

	# Remove some useless configs.
	rm config/aws.yml.example \
		config/database.yml.mysql \
		config/newrelic.yml \
		config/unicorn.rb.example.development
}

build() {
	local bundle="bundle$_rubyslot"
	local cpus="$(grep -c ^processor /proc/cpuinfo || echo 1)"
	local bundle_opts="--deployment --jobs=$cpus --no-cache
		--without exclude auth-ext fog development kerberos metrics mysql test"

	cd "$builddir"

	msg "Installing Ruby gems..."

	$bundle config build.nokogiri --use-system-libraries
	$bundle config build.rugged --use-system-libraries

	$bundle $bundle_opts || return 1

	msg "Compiling assets (this will take few minutes)..."

	# Since we have moved assets gems into a group, they are not implicitly
	# loaded by default. This will be reverted after compiling assets.
	sed -i.bak '/Bundler.require(:default, Rails.env/s/)/, :assets)/' \
		config/application.rb || return 1

	# assets:precompile bootstraps the app, so it needs a config file.
	cp config/gitlab.yml.example config/gitlab.yml || return 1

	# The configured path is not readable for the user building
	# the package, so we must remove it; GitLab will use the default path.
	sed -i '/^\s*secret_file:.*/d' config/gitlab.yml || return 1

	# We must set database URL, but it's not needed to be actually
	# accessible, so just provide some dummy URL.
	DATABASE_URL="postgres://user:pass@127.0.0.1/dummy" \
		RAILS_ENV=production \
		SECRET_KEY_BASE="top-secret" \
		SKIP_STORAGE_VALIDATION=true \
		USE_DB=false \
		$bundle exec rake assets:precompile || return 1

	mv config/application.rb.bak config/application.rb || return 1

	msg "Cleaning assets gems..."

	$bundle $bundle_opts assets --clean || return 1

	# Create executables in bin/*.
	$bundle binstubs --force mail_room sidekiq unicorn || return 1

	# When GitLab executes a system command, it leaks some Bundler
	# env. variables. The problem may occur when it execute a Ruby script
	# with shebang "/usr/bin/env ruby"; Bundler tries to initialize GitLab
	# environments, but due to different Ruby versions it doesn't see its
	# gems. The workaround is to symlink ruby -> ruby2.1 to $_prefix/bin
	# and add it to the PATH.
	#local file; for file in bin/*; do
	#	[ -f $file ] || continue
	#	# Add text after the first line of the file.
	#	sed -i "1a ENV['PATH'] = \"#{__dir__}:#{ENV['PATH']}\"" $file || return 1
	#done

	# Cleanup
	rm config/gitlab.yml config/secrets.yml
	rm -R vendor/bundle/ruby/*/cache/
	rm -R vendor/bundle/ruby/*/build_info
}

package() {
	local destdir="${pkgdir}$_prefix"
	local datadir="$pkgdir/var/lib/gitlab"
	local file dest

	cd "$builddir"

	install -d -m755 "$destdir" "$destdir"/bin

	install -d -m755 -o git -g git \
		"$datadir" \
		"$pkgdir"/etc/gitlab \
		"$pkgdir"/var/log/gitlab || return 1

	install -d -m700 -o git -g git \
		"$datadir"/artifacts \
		"$datadir"/builds \
		"$datadir"/lfs-objects \
		"$datadir"/registry \
		"$datadir"/uploads || return 1

	install -d -m02770 -o git -g git \
		"$datadir"/repositories || return 1

	# Remove some useless files before copying.
	rm -r lib/support db/fixtures/development db/fixtures/test
	find lib/tasks -maxdepth 1 -type f ! -name cache.rake ! -name setup.rake -delete
	find lib/tasks/gitlab -name generate_docs.* -o -name shell.* -o -name test.* -delete

	mv config/unicorn.rb.example config/unicorn.rb || return 1

	# Install application files.
	# Note: *VERSION files and doc directory are required (Help in GitLab
	# menu refers to the doc directory).
	cp -rl .bundle config.ru Gemfile* GITLAB_SHELL_VERSION GITLAB_WORKHORSE_VERSION \
		Rakefile VERSION app db doc fixtures config lib public vendor \
		"$destdir"/ || return 1

	install -m755 -t "$destdir"/bin \
		bin/bundle bin/mail_room bin/rails bin/rake \
		bin/sidekiq bin/unicorn_rails || return 1

	# Install and symlink config files.
	for file in database.yml.postgresql \
			gitlab.yml.example \
			resque.yml.example \
			sidekiq.yml.example \
			initializers/rack_attack.rb.example \
			initializers/smtp_settings.rb.sample; do
		dest="$(basename "${file%.*}")"
		install -m640 -g git -D config/$file "$pkgdir"/etc/gitlab/$dest || return 1
		ln -sf /etc/gitlab/$dest "$pkgdir"$_prefix/config/${file%.*} || return 1
	done

	# This file will be generated by the post-install script, just prepare symlink.
	ln -sf /etc/gitlab/secrets.yml "$destdir"/config/secrets.yml || return 1

	echo "export RAILS_ENV=production" > "$datadir"/.profile

	# Some paths are hard-coded in GitLab, so we must make symlinks. :(
	ln -sf /var/lib/gitlab/uploads "$destdir"/public/uploads || return 1
	ln -sf /var/log/gitlab "$destdir"/log || return 1
	ln -sf /tmp/gitlab "$destdir"/tmp || return 1

	# See the last comment in the build() function.
	#ln -sf /usr/bin/ruby$_rubyslot "$destdir"/bin/ruby || return 1

	# Install wrapper scripts to /usr/bin.
	local name; for name in rake rails; do
		sed "s/__COMMAND__/$name/g" "$srcdir"/bin-wrapper > gitlab-$name || return 1
		install -m755 -D gitlab-$name "$pkgdir"/usr/bin/gitlab-$name || return 1
	done

	for file in $_pkgname $_pkgname.sidekiq $_pkgname.mailroom; do
		install -m755 -D "$srcdir"/$file.initd "$pkgdir"/etc/init.d/$file || return 1
	done

	install -m644 -D "$srcdir"/$_pkgname.confd \
		"$pkgdir"/etc/conf.d/$_pkgname || return 1

	install -m644 -D "$srcdir"/$_pkgname.logrotate \
		"$pkgdir"/etc/logrotate.d/$_pkgname
}

assets() {
	depends=""
	local destdir="${subpkgdir}$_prefix"

	install -dm755 "$destdir"/public
	mv "${pkgdir}$_prefix"/public/assets "$destdir"/public/
}

sha512sums="1a94765fdd24d1f7b3cc56baa20ad2dc5866f186d8d7bdc922a2c9850a9b79bdea7f0fbfd07667e3c22ae1c52c4b5932977752ba0a4d60df44835d4c5aea9c93  gitlab-ce-8.11.11.tar.gz
a043a21660611ea94bb59a67399a2f84fd4ca2afd8d2ae12f375c32b774c8329b714904430c0772e8844348bdae6b1338e92606e8b9baad8956a255b54b09250  gitlab.initd
d56587e94db0f607d4d37dbc1952914e2d6628405b3c2fe9f7548f27ca70f5393bf4fdebc7fa192b9bad7d07706a55cd77a910bd127236422f0f6d4a5a46be25  gitlab.mailroom.initd
705a05d7a1e1d01a83845d483d65ffd2bf1c5c9f3186f78bfe8cd515efda7452f74a5ce92be9373be5a1cf6bedb583ba545821cecdb43f42859644cf8fab78b2  gitlab.sidekiq.initd
a162412e9df709ab48cb223097c0f39dd58735a4a6f93c97686bc73727834f7ff437a573a24ff6229e4447fff0c0398d362281f3274ad28426f7054bfe3c5ba1  gitlab.confd
d711d9c0a17a8a6f862f5505da1eb65a701917155207b5864b40e8acfaf958c68a2d8f9b01a92871b3d630e00c78df38b24701e4adcba8f1d35cdc69dedf2df6  gitlab.logrotate
aff81967c19213a79f752fc3b79fac63d5ca8b68716c09542fda776355b12b85cae166966b96d64c8085254b9dc85e19d0b664cd93e1aaa01f7da89b0a4b6a8e  bin-wrapper
7d7c4b2503ed4d77912d4b6ce3a8dd57c04c28ff5d82d02efc89f094b54f5c76fb57f19bae60792450aac55f2f7d61927083ad06c8380110d925746ee2e14e4d  0001-Gemfile.patch
f003339ef3041398b8e240deac4fbffdd71cf280ed9ad1d2b2a4943096d425864891d9cf7deeb7a9d57798b7f25b04f21fc06558062e41ee0f9ab0705a6f6b5f  0002-default-configs.patch
5fe15dae9b27641dafdefa44e8a31a0b9fbcb2b3485fe0691fe60016e7bc646edf79d204068555699e18e9b643f9ea05dec0919333a3c4999381eff62df00a75  0003-dont-dump-schema.patch
ae798cdbc5e3292cc874a4bb8aee56f489abd2de1d33333fe2638f7a6bca768be08151d492532d606ee65de2931687b4ada164890efb670e91e84fbdc5098a91  0004-fix-setup-task.patch
7378b4d1745ba75111e3c11218f7f89c047ecd4b663a85484095448daacc991ec1df924177261e286abafc02c39894bceafc2a0aad97c99dea63ec342610255b  0005-fix-check-task.patch
7a2745d21d9d00dd60f9e22010d2417a2b561b93540581c411ee64592a55154f59259ef7e1969b548100e26b2d55ce2e4e4c698f630c1f27439898afd12e5d1e  0006-replace-sys-filesystem.patch
b4381a9ab5e92c786624860216ae40ce1c344331ff778850f17c3cc28761623ed2ffacd6c405b09e7811d91c9dd5f742da07ed60fd0235005a97d4e351d8e226  0007-add-mathjax-support.patch
5a8e9c77e9c06043b130cc14b6654653c95d9b99f6d755aba6f007a96d3181f287e7039dcf3f758555e9514ae18a1164ede0496fe8b267bbb2f538cd4582a9d1  0008-fix-asciidoc-headers.patch
7a1eab9b09e123e3130ca4ff90e20ab1d422694efd2c8e7d087afe3d6585d7df702c53759b4770aab5ea276f06aca5358e04b5594a588ec3d6f3e9d896d818e7  0009-gitlab-revision.patch"
