# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Jakub Jirutka <jakub@jirutka.cz>
pkgname=gitlab-ce
_pkgname=${pkgname%-ce}
pkgver=9.1.8
pkgrel=1
pkgdesc="A version control for your server"
url="https://github.com/gitlabhq/gitlabhq"
arch=""  # XXX: Temporarily disabled due to problem with ruby-google-protobuf.
license="MIT"
_rubyslot=""
# ruby-irb is needed only for Rails console (gitlab-rails console)
depends="$pkgname-assets=$pkgver-r$pkgrel
	gitlab-shell<5.0.5
	gitlab-workhorse>=1.4
	ca-certificates
	git>=2.8.3
	http-parser
	libgit2>=0.24
	procps
	py-docutils
	python3
	redis>=2.8
	tzdata
	ruby$_rubyslot
	ruby$_rubyslot-io-console
	ruby$_rubyslot-bigdecimal
	ruby$_rubyslot-json
	ruby$_rubyslot-rake
	ruby$_rubyslot-irb
	ruby$_rubyslot-bundler>=1.5.2
	"
makedepends="
	icu-dev
	libgcrypt-dev
	libgit2-dev>=0.25
	libxml2-dev
	libxslt-dev
	linux-headers
	libressl-dev
	postgresql-dev
	nodejs>=4.3.0
	re2-dev
	ruby$_rubyslot-dev
	ruby$_rubyslot-grpc
	ruby$_rubyslot-google-protobuf
	yarn>=0.17.0
	"
pkgusers="git"
pkggroups="git"
install="$pkgname.pre-install $pkgname.post-install $pkgname.post-upgrade"
subpackages="$pkgname-assets::noarch"
source="$pkgname-$pkgver.tar.gz::https://github.com/gitlabhq/gitlabhq/archive/v$pkgver.tar.gz
	$_pkgname.initd
	$_pkgname.mailroom.initd
	$_pkgname.sidekiq.initd
	$_pkgname.confd
	$_pkgname.logrotate
	bin-wrapper.in
	gemfile-exclude-unnecessary-gems.patch
	dont-hardcode-gitlab_workhorse_secret-path.patch
	default-configs.patch
	dont-dump-schema.patch
	fix-setup-task.patch
	fix-check-task.patch
	replace-sys-filesystem.patch
	gitlab-revision.patch
	gemfile-use-local-grpc-and-protobuf.patch
	fix-latex-formatting-in-asciidoc.patch
	gemfile-update-asciidoctor.patch
	asciidoc-enable-setanchors-by-default.patch
	"
builddir="$srcdir/gitlabhq-$pkgver"

_prefix="/usr/lib/bundles/$_pkgname"

prepare() {
	local sysgemdir=$(ruby$_rubyslot -rubygems -e 'puts Gem.default_dir')

	default_prepare

	cd "$builddir"

	# Change shebang to run with correct Ruby version.
	#local file; for file in bin/bundle bin/rails bin/rake; do
	#	sed -i "s|/usr/bin/env ruby|/usr/bin/env ruby$_rubyslot|" $file
	#done
	#sed -i "s|/usr/bin/env rake|/usr/bin/env rake$_rubyslot|" Rakefile

	# The default log level is very chatty.
	sed -i 's/^\(\s*config.log_level\s*=\).*$/\1 :warn/' \
		config/environments/production.rb

	# This is not needed, the secret_token is generated by the
	# gitlab-shell package. It also makes problems in the build phase.
	rm config/initializers/gitlab_shell_secret_token.rb

	# Remove some useless configs.
	rm config/aws.yml.example \
		config/database.yml.env \
		config/database.yml.mysql \
		config/karma.config.js \
		config/unicorn.rb.example.development \
		config/environments/development.rb \
		config/environments/test.rb

	# These Google gems are totally messed, so we can't install them from
	# RubyGems using Bundler.
	# XXX: google-protobuf can be installed via Bundler after upgrade
	# to Alpine v3.6.
	local name; for name in grpc google-protobuf; do
		mkdir -p vendor/gems/$name

		cp -r "$sysgemdir"/gems/$name-*/* vendor/gems/$name/
		cp "$sysgemdir"/specifications/$name-*.gemspec \
			vendor/gems/$name/$name.gemspec
	done
	cp "$sysgemdir"/extensions/*/*/grpc-*/grpc/grpc_c.so \
		vendor/gems/grpc/src/ruby/lib/grpc/
	cp "$sysgemdir"/extensions/*/*/google-protobuf-*/google/protobuf_c.so \
		vendor/gems/google-protobuf/lib/google/
}

build() {
	local bundle="bundle$_rubyslot"
	local bundle_opts="--deployment --jobs=${JOBS:-2} --no-cache
		--without exclude development kerberos metrics mysql test"

	cd "$builddir"

	msg "Installing Ruby gems..."

	$bundle config build.nokogiri --use-system-libraries
	$bundle config build.rugged --use-system-libraries

	$bundle $bundle_opts

	# Patch installed gem gitlab-markup to use python3.
	# Option "-S" causes that Python cannot find docutils module.
	sed -i 's/python2 -S/python3/g' \
		vendor/bundle/ruby/*/gems/gitlab-markup-*/lib/github/markups.rb

	msg "Installing npm modules..."

	yarn install --production --pure-lockfile

	msg "Compiling assets (this will take few minutes)..."

	# Since we have moved assets gems into a group, they are not implicitly
	# loaded by default. This will be reverted after compiling assets.
	sed -i.bak '/Bundler.require(:default, Rails.env/s/)/, :assets)/' \
		config/application.rb

	# assets:precompile bootstraps the app, so it needs configs.
	cp config/gitlab.yml.example config/gitlab.yml
	cp config/database.yml.postgresql config/database.yml

	# The configured path is not readable for the user building
	# the package, so we must remove it; GitLab will use the default path.
	sed -i '/^\s*secret_file:.*/d' config/gitlab.yml

	$bundle exec rake gitlab:assets:compile \
		NODE_ENV=production \
		RAILS_ENV=production \
		SECRET_KEY_BASE="top-secret" \
		SKIP_STORAGE_VALIDATION=true \
		USE_DB=false

	mv config/application.rb.bak config/application.rb

	msg "Cleaning assets gems..."

	$bundle $bundle_opts assets --clean

	# Create executables in bin/*.
	$bundle binstubs --force mail_room sidekiq unicorn

	# When GitLab executes a system command, it leaks some Bundler
	# env. variables. The problem may occur when it execute a Ruby script
	# with shebang "/usr/bin/env ruby"; Bundler tries to initialize GitLab
	# environments, but due to different Ruby versions it doesn't see its
	# gems. The workaround is to symlink ruby -> ruby2.1 to $_prefix/bin
	# and add it to the PATH.
	#local file; for file in bin/*; do
	#	[ -f $file ] || continue
	#	# Add text after the first line of the file.
	#	sed -i "1a ENV['PATH'] = \"#{__dir__}:#{ENV['PATH']}\"" $file
	#done

	# Cleanup
	rm config/database.yml config/gitlab.yml config/secrets.yml
}

package() {
	local destdir="${pkgdir}$_prefix"
	local datadir="$pkgdir/var/lib/gitlab"
	local file dest

	cd "$builddir"

	install -d -m755 "$destdir" "$destdir"/bin

	install -d -m755 -o git -g git \
		"$datadir" \
		"$pkgdir"/etc/gitlab \
		"$pkgdir"/var/log/gitlab \
		"$datadir"/pages

	install -d -m700 -o git -g git \
		"$datadir"/artifacts \
		"$datadir"/builds \
		"$datadir"/lfs-objects \
		"$datadir"/registry \
		"$datadir"/uploads \
		"$pkgdir"/var/tmp/gitlab/downloads \
		"$pkgdir"/var/tmp/gitlab/backups

	install -d -m02770 -o git -g git \
		"$datadir"/repositories

	# Install application files.
	# Note: *VERSION files and doc directory are required (Help in GitLab
	# menu refers to the doc directory).
	cp -rl .bundle config.ru Gemfile* Rakefile *VERSION app db doc \
		fixtures config lib public vendor \
		"$destdir"/

	install -m755 -t "$destdir"/bin \
		bin/bundle bin/mail_room bin/rails bin/rake \
		bin/sidekiq bin/unicorn_rails


	cd "$destdir"

	# Not needed in runtime since we have already compiled all assets.
	rm -R app/assets vendor/assets

	rm -r lib/support db/fixtures/development
	find lib/tasks -maxdepth 1 -type f ! -name cache.rake ! -name setup.rake -delete
	find lib/tasks/gitlab \
		-name 'generate_docs.*' -delete \
		-o -name 'shell.*' -delete \
		-o -name 'test.*' -delete

	cd "$destdir"/vendor/bundle/ruby/*/

	# Remove documentations and other unused textual files.
	find gems/ -name 'doc' -type d -exec rm -frv "{}" +
	find gems/ \
		-name 'README*' -delete \
		-o -name 'CHANGELOG*' -delete \
		-o -name 'CONTRIBUT*' -delete \
		-o -name '*LICENSE*' -delete

	# Remove bundled libgit2 sources.
	rm -R gems/rugged-*/vendor/libgit2

	# Remove assets, they are already compiled.
	rm -R gems/gemojione-*/assets

	# Remove sources and binaries of native extensions (they are installed
	# in extensions directory).
	find gems/ -type d -name ext -maxdepth 2 -exec rm -frv "{}" +
	find gems/ -name '*.so' -delete

	# Remove build logs and cache.
	rm -R build_info/ cache/
	find extensions/ \
		-name gem_make.out -delete \
		-o -name mkmf.log -delete


	cd "$destdir"

	mv config/unicorn.rb.example config/unicorn.rb

	# Just to unify for the next loop...
	mv config/sidekiq_queues.yml config/sidekiq_queues.yml.orig

	# Install and symlink config files.
	for file in database.yml.postgresql \
			gitlab.yml.example \
			resque.yml.example \
			sidekiq.yml.example \
			sidekiq_queues.yml.orig \
			initializers/rack_attack.rb.example \
			initializers/smtp_settings.rb.sample; do
		dest="$(basename "${file%.*}")"
		install -m640 -g git -D config/$file "$pkgdir"/etc/gitlab/$dest
		ln -sf /etc/gitlab/$dest "$pkgdir"$_prefix/config/${file%.*}
	done

	# This file will be generated by the post-install script, just prepare symlink.
	ln -sf /etc/gitlab/secrets.yml config/secrets.yml

	cat > "$datadir"/.profile <<-EOF
		export RAILS_ENV=production
		export NODE_ENV=production
		export EXECJS_RUNTIME=Disabled
	EOF

	# Some paths are hard-coded in GitLab, so we must make symlinks. :(
	ln -sf /var/lib/gitlab/uploads public/uploads
	ln -sf /var/log/gitlab log
	ln -sf /tmp/gitlab tmp

	# See the last comment in the build() function.
	#ln -sf /usr/bin/ruby$_rubyslot bin/ruby

	# Install wrapper scripts to /usr/bin.
	local name; for name in rake rails; do
		sed "s/__COMMAND__/$name/g" "$srcdir"/bin-wrapper.in \
			> "$builddir"/gitlab-$name
		install -m755 -D "$builddir"/gitlab-$name "$pkgdir"/usr/bin/gitlab-$name
	done

	for file in $_pkgname $_pkgname.sidekiq $_pkgname.mailroom; do
		install -m755 -D "$srcdir"/$file.initd "$pkgdir"/etc/init.d/$file
	done

	install -m644 -D "$srcdir"/$_pkgname.confd \
		"$pkgdir"/etc/conf.d/$_pkgname

	install -m644 -D "$srcdir"/$_pkgname.logrotate \
		"$pkgdir"/etc/logrotate.d/$_pkgname
}

assets() {
	depends=""
	local destdir="${subpkgdir}$_prefix"

	install -dm755 "$destdir"/public
	mv "${pkgdir}$_prefix"/public/assets "$destdir"/public/
}

sha512sums="b8c44b05638556c47bbaae0ef438fa54a5b2d3005403228a64d324c98d80b160d58afd86b58b5ad209ec2dda8933ce9bbd4a1313c7e3f1478cf3a36b200db65c  gitlab-ce-9.1.8.tar.gz
16704d9e301328147e5d16ec447adc88a15e3749bdb2c0641735d20794dea66b074c178d57d6ad6bf51b1887f238b740a9ef3eb4a897d52b677f6e2c9a7df471  gitlab.initd
d56587e94db0f607d4d37dbc1952914e2d6628405b3c2fe9f7548f27ca70f5393bf4fdebc7fa192b9bad7d07706a55cd77a910bd127236422f0f6d4a5a46be25  gitlab.mailroom.initd
84c51a03e938c39b3081cb55b115148e087a1f58a4b9cc43b76be93aee67b7e04f41f42e6594d5810946a701cf3554ac26851b2f9de91e73927e7ef70945e2ba  gitlab.sidekiq.initd
607da2cb246d3289b0f2529f541427b4b99cb0ee39f158a0458f9746af0b60417e0271b293c1da1629fd85c9bc7d84755afe39bf6dae851ba6eaaf1878e4f60b  gitlab.confd
d711d9c0a17a8a6f862f5505da1eb65a701917155207b5864b40e8acfaf958c68a2d8f9b01a92871b3d630e00c78df38b24701e4adcba8f1d35cdc69dedf2df6  gitlab.logrotate
a944c3886388ba1574bf8c96b6de4d9f24ef4a83f553c31a224e17a3b01f2a5c65b60c59b7ed7ca4b25670c60ea8dd41b96a8a623d909d2bb09bdf2520ed7f23  bin-wrapper.in
7b81837234c292e4aa623fd7f1ae82eb8466fa54819557c6bddfb62eec7c38a4a8526dbe404068f93f68085e9022355aa5a76544e08f8cc806e06bd34ff24a54  gemfile-exclude-unnecessary-gems.patch
50579b45d788dcb4010090cfca10f39969c8f53ee22a27c7fc5883f93f253a09b2932ba459db561a0cc050e445d92a6ad0c39a11696435f68c9538c55935d309  dont-hardcode-gitlab_workhorse_secret-path.patch
d401618c49da62709a3568ab6b9ee616f7c0c4615284665859d2a71f638cc9a69833b5c07f7ed51d7f79a3b7d545c768f60c6012177c1295fd265f50eea480fb  default-configs.patch
ac9e2b58542ff82ed8c91623c0ed2bd5df94e8ac4978f7aadbaaa90dfdf0f41fd2d3b29deda75311a8d53d0576f22d3f44201d41002f609ae73ba8027cad70fa  dont-dump-schema.patch
d834c4d8815de2ffc5ffb7e91dfba72b66f4cd39abbe03191db8748d42d0db263063b99bdef72ecfe41b9dad8fafe72891c21df6659447d573bac7f388798bac  fix-setup-task.patch
cc665efa6d7cdf988115557b892b39b584c90fb27b8e0114459edea826bb2bdd6f331ecceddc601611a235129dac534ea5941380e46e6d021ca339b2e164648f  fix-check-task.patch
84b21ee18d6472cc6cd5e61b8797572734e3c31440356fa72c7227c18bdafc52db7b8970fbeb26b54c1e9ad229eb464cc00fb9c644ce230f9f75992047837811  replace-sys-filesystem.patch
99c09ae81f2e553663ec610b4476be692774df363bc4e82796d4f7b7ebf653aa9999abcfa1bd9269bccc79e4fd2f2896f32d5b1458857d003e17fb94b03dec79  gitlab-revision.patch
2e3b340e018e578f152cfab079a26c789462777356ad8c83ebc5487d623b74ab073e27e448d65320457d9e2fcb84f26827753f5c0f9571f6df8b4ebdec9c1ee5  gemfile-use-local-grpc-and-protobuf.patch
5f9cb826ef2c2ad3c4da6aed85a1dc9665fc0624454353b1340c62ec1c62354d385e170bbee5b005e1cb70e2d112be49a0a0684435c4eb21655fbb8a67d38a32  fix-latex-formatting-in-asciidoc.patch
8ac2d0dc81f3090d6c833a8e117723f36b7166813ca9bcec526831c4f54feac537f24a601d6c6f0dd6f654d57e5d9c919442e9d11c6e878688b5a1a816ab3312  gemfile-update-asciidoctor.patch
f8f7ac799134bd99bdf60f18dbbaf9456a4fc6ad62f34def017b68ec541527f0e7d914b0c99cffe03cc17a346cd313ac924b7da20b1738256b58861a5ff3f911  asciidoc-enable-setanchors-by-default.patch"
