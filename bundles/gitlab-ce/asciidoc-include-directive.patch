From 3dc2478030c52106ed3a5c2bdc15bdedf6339cf6 Mon Sep 17 00:00:00 2001
From: Jakub Jirutka <jakub@jirutka.cz>
Date: Fri, 1 Sep 2017 02:18:32 +0200
Subject: [PATCH] Add basic support for AsciiDoc include directive

See http://asciidoctor.org/docs/user-manual/#include-directive

Upstream-PR: https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/13978
---
 app/helpers/markup_helper.rb |   5 ++
 lib/gitlab/asciidoc.rb       | 107 ++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 111 insertions(+), 1 deletion(-)

diff --git a/app/helpers/markup_helper.rb b/app/helpers/markup_helper.rb
index 941cfce..50a171d 100644
--- a/app/helpers/markup_helper.rb
+++ b/app/helpers/markup_helper.rb
@@ -221,6 +221,11 @@ module MarkupHelper
   end
 
   def asciidoc_unsafe(text, context = {})
+    context.merge!(
+      commit:         @commit,
+      ref:            @ref,
+      requested_path: @path
+    )
     Gitlab::Asciidoc.render(text, context)
   end
 
diff --git a/lib/gitlab/asciidoc.rb b/lib/gitlab/asciidoc.rb
index 2a84322..bdf632b 100644
--- a/lib/gitlab/asciidoc.rb
+++ b/lib/gitlab/asciidoc.rb
@@ -1,5 +1,6 @@
 require 'asciidoctor'
 require 'asciidoctor/converter/html5'
+require 'asciidoctor/extensions'
 require "asciidoctor-plantuml"
 
 module Gitlab
@@ -15,11 +16,17 @@ module Gitlab
     # Public: Converts the provided Asciidoc markup into HTML.
     #
     # input         - the source text in Asciidoc format
+    # context       - :commit, :project, :ref, :requested_path
     #
     def self.render(input, context)
+      extensions = proc do
+        include_processor GitlabIncludeProcessor.new(context)
+      end
+
       asciidoc_opts = { safe: :secure,
                         backend: :gitlab_html5,
-                        attributes: DEFAULT_ADOC_ATTRS }
+                        attributes: DEFAULT_ADOC_ATTRS,
+                        extensions: extensions }
 
       context[:pipeline] = :ascii_doc
 
@@ -62,5 +69,103 @@ module Gitlab
         node.id ? %( id="#{node.id}") : nil
       end
     end
+
+    # Asciidoctor extension for processing includes (macro include::[]) within
+    # documents inside the same repository.
+    class GitlabIncludeProcessor < Asciidoctor::Extensions::IncludeProcessor
+      def initialize(context, config = {})
+        super(config)
+
+        @context = context
+        @repository = context[:project].try(:repository)
+
+        # Note: Asciidoctor calls #freeze on extensions, so we can't set new
+        # instance variables after initialization.
+        @cache = {
+          uri_types: {}
+        }
+      end
+
+      def process(doc, reader, target, attributes)
+        return reader unless @repository.try(:exists?)
+
+        # Resolve relative target path against the requested path (path of the
+        # file user wants to see), or against path of the currently processed
+        # include if processing nested include (i.e. A includes B,
+        # B includes C, ...).
+        base_path = reader.include_stack.empty? ? requested_path : reader.file
+        path = resolve_relative_path(target, base_path)
+
+        blob = @repository.blob_at(ref, path)
+        error = if blob.nil?
+                  'Unresolved path'
+                elsif !blob.readable_text?
+                  'File not readable'
+                elsif reader.exceeded_max_depth?
+                  'Maximum depth exceeded'
+                end
+        if error
+          reader.replace_line("*[ERROR: include::#{target}[] - #{error}]*")
+        else
+          reader.push_include(blob.data, path, target, 1, attributes)
+        end
+
+        reader
+      end
+
+      protected
+
+      # Resolves the given relative path of file in repository into canonical
+      # path based on the specified base_path.
+      #
+      # Examples:
+      #
+      #   # File in the same directory as the current path
+      #   resolve_relative_path("users.adoc", "doc/api/README.adoc")
+      #   # => "doc/api/users.adoc"
+      #
+      #   # File in the same directory, which is also the current path
+      #   resolve_relative_path("users.adoc", "doc/api")
+      #   # => "doc/api/users.adoc"
+      #
+      #   # Going up one level to a different directory
+      #   resolve_relative_path("../update/7.14-to-8.0.adoc", "doc/api/README.adoc")
+      #   # => "doc/update/7.14-to-8.0.adoc"
+      #
+      # Returns a String
+      def resolve_relative_path(path, base_path)
+        return base_path if path.empty?
+        return path unless base_path
+        return path[1..-1] if path.start_with?('/')
+
+        parts = base_path.split('/')
+        parts.pop if uri_type(base_path) != :tree
+
+        path = path.sub(/\A\.\//, '')
+
+        while path.start_with?('../')
+          parts.pop
+          path.sub!('../', '')
+        end
+
+        parts.push(path).join('/')
+      end
+
+      def current_commit
+        @cache[:current_commit] ||= @context[:commit] || @repository.commit(ref)
+      end
+
+      def ref
+        @context[:ref] || @context[:project].default_branch
+      end
+
+      def requested_path
+        @cache[:requested_path] ||= Addressable::URI.unescape(@context[:requested_path])
+      end
+
+      def uri_type(path)
+        @cache[:uri_types][path] ||= current_commit.uri_type(path)
+      end
+    end
   end
 end
-- 
2.10.1 (Apple Git-78)

